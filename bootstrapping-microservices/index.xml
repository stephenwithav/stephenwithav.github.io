<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Bootstrapping-Microservices on Steven&#39;s Thoughts</title>
    <link>https://example.org/bootstrapping-microservices/</link>
    <description>Recent content in Bootstrapping-Microservices on Steven&#39;s Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Steven Edwards</copyright>
    <lastBuildDate>Tue, 01 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/bootstrapping-microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick Container-based Microservice Development with Air</title>
      <link>https://example.org/bootstrapping-microservices/air-for-live-dev-container-reloads-and-messaging-between-microservices/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/bootstrapping-microservices/air-for-live-dev-container-reloads-and-messaging-between-microservices/</guid>
      <description>&lt;p&gt;&#xA;History.  That&amp;#39;s the microservice we will focus on this week.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;We drop the &lt;code class=&#34;verbatim&#34;&gt;video-storage&lt;/code&gt; microservice from &lt;a href=&#34;https://example.org/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/&#34;&gt;previous&lt;/a&gt; &lt;a href=&#34;https://example.org/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/&#34;&gt;weeks&lt;/a&gt; in &lt;strong&gt;&lt;strong&gt;Chapter 5: Communication Between Microservices&lt;/strong&gt;&lt;/strong&gt; of &lt;a href=&#34;https://bootstrapping-microservices.com/&#34;&gt;Bootstrapping Microservices&lt;/a&gt; so we can focus on the distinct ways microservices communicate with each other: directly via HTTP requests or indirectly using a third-party message broker like &lt;a href=&#34;rabbitmq go&#34;&gt;RabbitMQ&lt;/a&gt;.  (Or &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, which will be covered in a subsequent series.)&lt;/p&gt;&#xA;&lt;p&gt;&#xA;But first, let&amp;#39;s discuss our development process.  We helpfully used &lt;code class=&#34;verbatim&#34;&gt;air&lt;/code&gt; in the &lt;a href=&#34;https://example.org/bootstrapping-microservices/in-the-beginning/#outline-container-headline-3&#34;&gt;first&lt;/a&gt; post of this series to enable live reload outside of a container.  We used &lt;code class=&#34;verbatim&#34;&gt;air&lt;/code&gt; again last week outside of Docker to quickly isolate a &lt;a href=&#34;https://example.org/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/#outline-container-headline-6&#34;&gt;configuration issue&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[
<p>
History.  That&#39;s the microservice we will focus on this week.</p>
<p>
We drop the <code class="verbatim">video-storage</code> microservice from <a href="/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/">previous</a> <a href="/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/">weeks</a> in <strong><strong>Chapter 5: Communication Between Microservices</strong></strong> of <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> so we can focus on the distinct ways microservices communicate with each other: directly via HTTP requests or indirectly using a third-party message broker like <a href="rabbitmq go">RabbitMQ</a>.  (Or <a href="https://kafka.apache.org/">Kafka</a>, which will be covered in a subsequent series.)</p>
<p>
But first, let&#39;s discuss our development process.  We helpfully used <code class="verbatim">air</code> in the <a href="/bootstrapping-microservices/in-the-beginning/#outline-container-headline-3">first</a> post of this series to enable live reload outside of a container.  We used <code class="verbatim">air</code> again last week outside of Docker to quickly isolate a <a href="/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/#outline-container-headline-6">configuration issue</a>.</p>
<p>
Wouldn&#39;t it be great if we could quickly iterate on our Dockerized microservices while they&#39;re actually running?  Fortunately for us, we can create a <code class="verbatim">Dockerfile</code> for development that runs <code class="verbatim">air</code> and creates a superb workflow.</p>
<p>
The <code class="verbatim">Dockerfile</code> in question?</p>
<div class="src src-dockerfile">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.23</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go install github.com/air-verse/air@latest<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /src</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;air&#34;</span>]</span></span></code></pre></div>
</div>
<p>
We don&#39;t add any files to <code class="verbatim">/src</code> in this base container so we&#39;re forced to add a <code class="verbatim">volume:</code> mapping in our <code class="verbatim">docker-compose.yml</code> files.  Should we forget, <code class="verbatim">docker compose</code> will remind us with this gentle error:</p>
<div class="src src-md">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>video-streaming  |
</span></span><span style="display:flex;"><span>video-streaming  |   <span style="font-style:italic">__</span>    _   ___
</span></span><span style="display:flex;"><span>video-streaming  |  / /\  | | | |_)
</span></span><span style="display:flex;"><span>video-streaming  | /_/--\ |_| |_| \_ v1.60.0, built with Go go1.23.1
</span></span><span style="display:flex;"><span>video-streaming  |
</span></span><span style="display:flex;"><span>video-streaming  | mkdir /src/tmp
</span></span><span style="display:flex;"><span>video-streaming  | watching .
</span></span><span style="display:flex;"><span>video-streaming  | !exclude tmp
</span></span><span style="display:flex;"><span>video-streaming  | building...
</span></span><span style="display:flex;"><span>video-streaming  | go: go.mod file not found in current directory or any parent directory; see &#39;go help modules&#39;
</span></span><span style="display:flex;"><span>video-streaming  | failed to build, error: exit status 1
</span></span><span style="display:flex;"><span>video-streaming  | running...
</span></span><span style="display:flex;"><span>video-streaming  | /bin/sh: 1: /src/tmp/main: not found
</span></span><span style="display:flex;"><span>video-streaming  | Process Exit with Code: 127</span></span></code></pre></div>
</div>
<p>
Ensure your volume mappings are correct if you experience this error.  Then restart your services with <code class="verbatim">dc down --volumes &amp;&amp; dc up --build</code> and you wil be ready to go with live reload fully enabled.</p>
<p>
Are you ready?  Let&#39;s begin.</p>
<div id="outline-container-headline-1" class="outline-3">
<h3 id="headline-1">
Round 1: Ensure <code class="verbatim">air</code> works by refactoring <code class="verbatim">video-streaming</code>. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-05/tree/main/example-01">source</a>)
</h3>
<div id="outline-text-headline-1" class="outline-text-3">
<p>We&#39;re going to keep it simple here: remove <code class="verbatim">video-storage</code> and <code class="verbatim">minio</code> from the <code class="verbatim">docker-compose.yml</code> file, then add a <code class="verbatim">history</code> section.  Your new <code class="verbatim">docker-compose.yml</code> should look like this:</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">video-streaming</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./video-streaming</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4000:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./video-streaming:/src</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">history</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./history</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4001:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span></span></span></code></pre></div>
</div>
<p>
Notice that we changed the Dockerfile of each <code class="verbatim">service</code> to <code class="verbatim">Dockerfile.dev</code>.  This is the <code class="verbatim">air</code>-based Dockerfile mentioned above that gives us live reload as we code.</p>
<p>
Next, create a <code class="verbatim">history</code> folder in the project root and add the following file as <code class="verbatim">history/main.go</code>:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// We switch from log to slog from here for structured logging.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// We could use JSON, but text works for now.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// We refactor the main func so we can fail eaaily on errors.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// The benefit?  Reduced error handling clutter in main.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`[fatal]`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Fail if the port variable isn&#39;t found.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a basic ServeMux for later use.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /viewed&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
A good rule of thumb is to keep the <code class="verbatim">main</code> function simple, so we move the bulk of its code to the <code class="verbatim">run</code> function and pass it a new <code class="verbatim">*slog.Logger</code>.  (We will use it in every example moving forward.)</p>
<p>
The removal of <code class="verbatim">video-storage</code> in this chapter means we have to revert to a revised version of <code class="verbatim">video-streaming</code> from Chapter 3.  Moving the core logic to the <code class="verbatim">run</code> function in <code class="verbatim">video-streaming</code> gives us:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;bytes&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`[fatal]`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Attempt to log the watched video to the history microservice.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">videoPath</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create the request body
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">viewedMessageBody</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">VideoPath</span>: <span style="color:#a6e22e">videoPath</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a new POST request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodPost</span>, <span style="color:#e6db74">`http://history/viewed`</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Set the content type header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">`Content-Type`</span>, <span style="color:#e6db74">`application/json`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a buffer to hold the JSON data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">jsonBuffer</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Use json.NewEncoder to encode the request body directly into the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewEncoder</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jsonBuffer</span>).<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">viewedMessageBody</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Send the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Client</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`Failed to send &#39;viewed&#39; message!`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Log the success.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`Sent &#39;viewed&#39; message to history microservice.`</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /video`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">`./videos/SampleVideo_1280x720_1mb.mp4`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`Not Found`</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">`video/mp4`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">`:`</span><span style="color:#f92672">+</span><span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
Now the exciting part: <code class="verbatim">cd</code> into your project root and change a file.  Maybe change the <code class="verbatim">log.Info</code> message or add a <code class="verbatim">w.WriteHeader(http.StatusNotImplemented)</code> to the <code class="verbatim">/watched</code> endpoint and see the magic happen live.</p>
<p>
Onto Round 2.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Round 2: Tight coupling with the <code class="verbatim">history</code> microservice. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-05/tree/main/example-02">source</a>)
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Our <code class="verbatim">history</code> microservice stores every view of our sample video in a <code class="verbatim">MongoDB</code> collection, so let&#39;s add the <code class="verbatim">mongo</code> service to our <code class="verbatim">docker-compose.yml</code> file:</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mongo:7</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4000:27017&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">video-streaming</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./video-streaming</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4001:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./video-streaming:/src</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">history</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./history</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4002:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./history:/src</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">DBHOST=mongodb://db:27017/</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">DBNAME=video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span></span></span></code></pre></div>
</div>
<p>
Based on what we see, this configuration demonstrates very tight coupling between the <code class="verbatim">video-streaming</code> and <code class="verbatim">history</code> microservices.  We know that because:</p>
<ol>
<li>We know every view of a video in <code class="verbatim">video-streaming</code> is recorded somewhere, presumably via the <code class="verbatim">history</code> microservice.</li>
<li>There is no <code class="verbatim">HISTORY_HOST</code> environment variable for <code class="verbatim">video-streaming</code> to know where to connect to.</li>
</ol>
<p>So let&#39;s take a look at the updated <code class="verbatim">history</code> code.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo/options&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbhost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBHOST`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbname</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBNAME`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to Mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">clientOpts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#a6e22e">dbhost</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">clientOpts</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`failed to connect to MongoDB: %s`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Retrieve a Mongo collection from the database.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">collection</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Database</span>(<span style="color:#a6e22e">dbname</span>).<span style="color:#a6e22e">Collection</span>(<span style="color:#e6db74">`history`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`POST /viewed`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// use json.NewDecoder().Decode() to get videoPath
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">messageBody</span> <span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewDecoder</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Body</span>).<span style="color:#a6e22e">Decode</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">messageBody</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>(), <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusBadRequest</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/viewed.Decode`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// insertOne in history collection.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">InsertOne</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Context</span>(), <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">M</span>{<span style="color:#e6db74">`videoPath`</span>: <span style="color:#a6e22e">messageBody</span>.<span style="color:#a6e22e">VideoPath</span>})
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>(), <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/viewed.collection.Insert`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`add`</span>, <span style="color:#e6db74">`videoPath`</span>, <span style="color:#a6e22e">messageBody</span>.<span style="color:#a6e22e">VideoPath</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /history`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">skip</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`skip`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">skipInt</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">skip</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotAcceptable</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">limit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`limit`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">limitInt</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">limit</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotAcceptable</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">findOptions</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Find</span>().
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetSkip</span>(int64(<span style="color:#a6e22e">skipInt</span>)).
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetLimit</span>(int64(<span style="color:#a6e22e">limitInt</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cursor</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">D</span>{}, <span style="color:#a6e22e">findOptions</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/history.collection.Find`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">cursor</span>.<span style="color:#a6e22e">Close</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">history</span> []<span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cursor</span>.<span style="color:#a6e22e">All</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">history</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/history.cursor.All`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewEncoder</span>(<span style="color:#a6e22e">w</span>).<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">history</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`:%s`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
We notice lines <code class="verbatim">39-48</code> connect to the <code class="verbatim">MongoDB</code> and retrieve a <code class="verbatim">collection</code> that we can use for general CRUD purposes, so <code class="verbatim">video-storage</code> must send a request here when images are viewed.</p>
<p>
Are we right?  Let&#39;s check.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;bytes&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /video`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">`./videos/SampleVideo_1280x720_1mb.mp4`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/video.os.Open`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/videoReader.Stat`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">`video/mp4`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// use io.Copy for streaming.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">`:`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Attempt to log the watched video to the history microservice upon a view.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">videoPath</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create the request body
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">messageBody</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">viewedMessageBody</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">VideoPath</span>: <span style="color:#a6e22e">videoPath</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a new POST request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodPost</span>, <span style="color:#e6db74">`http://history/viewed`</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Set the content type header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">`Content-Type`</span>, <span style="color:#e6db74">`application/json`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a buffer to hold the JSON data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">jsonBuffer</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Use json.NewEncoder to encode the request body directly into the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewEncoder</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">jsonBuffer</span>).<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">messageBody</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Send the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Client</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`Failed to send &#39;viewed&#39; message!`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Log the success.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`Sent &#39;viewed&#39; message to history microservice.`</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
Yes we are!  The <code class="verbatim">GET /video</code> handler calls <code class="verbatim">sendViewedMessage</code> on line <code class="verbatim">58</code>, which then calls <code class="verbatim">http://history/viewed</code> on line <code class="verbatim">73</code>.</p>
<p>
While the code works, this tight coupling of microservices makes <code class="verbatim">video-streaming</code> entirely dependent on <code class="verbatim">history</code> being healthy.</p>
<p>
What if we want to upgrade the <code class="verbatim">history</code> microservice?  <code class="verbatim">video-streaming</code> will silently fail to record new views until the upgrade is complete.  (This can work in a <code class="verbatim">Modular Monolith</code>.  That&#39;s a conversation for a future article, however.)</p>
<p>
Do we have options if we forego the direct service-to-service communication?  Indeed we do!</p>
<p>
Which leads us toâ¦</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Round 3: Loose coupling of microservices with <code class="verbatim">RabbitMQ</code>. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-05/tree/main/example-03">source</a>)
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>Think of <code class="verbatim">RabbitMQ</code> like en email inbox.  Anyone can send you a message anytime they wish and it is stored in your inbox for you to readâand answer, if you wish, at your leisure.</p>
<p>
Wouldn&#39;t it be nice if the <code class="verbatim">history</code> microservice upgrade example had that ability?  It can with <code class="verbatim">RabbitMQ</code>!</p>
<p>
Let&#39;s see how.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">amqp</span> <span style="color:#e6db74">&#34;github.com/rabbitmq/amqp091-go&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo/options&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbhost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBHOST`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbname</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBNAME`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`RABBIT`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to Mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">clientOpts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#a6e22e">dbhost</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">clientOpts</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`mongo.Connect`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">collection</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Database</span>(<span style="color:#a6e22e">dbname</span>).<span style="color:#a6e22e">Collection</span>(<span style="color:#e6db74">`history`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Disconnect</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to RabbitMQ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">rabbit</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`amqp.Dial`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Now we need to connect to the queue, consume messages.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ch</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Channel</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`conn.Channel`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Ensure the viewed queue exists in RabbitMQ;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// create if necessary.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">viewedMessageQueue</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`viewed`</span>, <span style="color:#75715e">// name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">true</span>,     <span style="color:#75715e">// durable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// delete when unused
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,      <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a message retrieval channel now
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// that we know the `viewed` queue exists.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">msgs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Consume</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">viewedMessageQueue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">``</span>,                      <span style="color:#75715e">// consumer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                   <span style="color:#75715e">// auto-ack
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                   <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                   <span style="color:#75715e">// no-local
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                   <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,                     <span style="color:#75715e">// args
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.Consume`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Retrieve every message in the viewedMessageQueue.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// Do we know who sent it?  No, but that&#39;s the beauty
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// of it.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">msgs</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">msgBody</span> <span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Body</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">msgBody</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Store msgBody into our collection.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">InsertOne</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">msgBody</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`collection.InsertOne`</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`collection.InsertOne`</span>, <span style="color:#e6db74">`insertedId`</span>, <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">InsertedID</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Acknowledge the message receipt so it can be deleted.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Ack</span>(<span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// The viewed handler is no longer necessary since we&#39;re pulling from the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// queue.  But we do need an endpoint that will print our view history.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// That&#39;s where /history comes in.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /history`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Retrieve a list of limit messages after the first skip many.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">skip</span>, <span style="color:#a6e22e">limit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`skip`</span>), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`limit`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">skipInt</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">skip</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">limitInt</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">limit</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Set the find option parameters.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">findOptions</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Find</span>().
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetSkip</span>(int64(<span style="color:#a6e22e">skipInt</span>)).
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetLimit</span>(int64(<span style="color:#a6e22e">limitInt</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Find every entry.  Ignore the first skipInt,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// retrieve up to limitInt.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">cursor</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">D</span>{}, <span style="color:#a6e22e">findOptions</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`/history.collection.Find`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Create storage space for our query and retrieve.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">results</span> []<span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">cursor</span>.<span style="color:#a6e22e">All</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">results</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`/history.Cursor.All`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Return the results as a JSON body.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewEncoder</span>(<span style="color:#a6e22e">w</span>).<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">results</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Start the server.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`:%s`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// warnOnNonFatalError logs errors without stopping the program.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// failWithError logs the error and stops the program.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
The code above demonstrates how every message retrieved from the <code class="verbatim">viewed</code> queue is stored in the <code class="verbatim">history</code> collection.  So who puts messages in the queue?</p>
<p>
For testing, we can use <code class="verbatim">RabbitMQ</code>&#39;s control panel by visiting <code class="verbatim">http://localhost:15672</code> and logging in with the username and password of <code class="verbatim">guest</code>.</p>
<p>
Notice in the <code class="verbatim">docker-compose.yml</code> below that both the <code class="verbatim">video-streaming</code> and <code class="verbatim">history</code> services have access to <code class="verbatim">RabbitMQ</code>&#39;s connection string.  (As noted in the book, only use <code class="verbatim">guest</code> in development.)</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mongo:7</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4000:27017&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rabbit</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">rabbitmq:3.12.4-management</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">rabbit</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;5672:5672&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;15672:15672&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">video-streaming</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./video-streaming</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4001:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./video-streaming:/src</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">RABBIT=amqp://guest:guest@rabbit:5672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">rabbit</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">history</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./history</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile.dev</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">history</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4002:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./history:/src</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">DBHOST=mongodb://db:27017/</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">DBNAME=video-streaming</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">RABBIT=amqp://guest:guest@rabbit:5672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">rabbit</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span></span></span></code></pre></div>
</div>
<p>
We can test this microservice by logging in to <code class="verbatim">RabbitMQ</code> and clicking the <code class="verbatim">Queues and Streams</code> tab.  Then click the <code class="verbatim">Publish message</code> dropdown, paste in a JSON message like <code class="verbatim">{&#34;videoPath&#34;:&#34;./videos/SampleVideo_1280x720_1mb.mp4&#34;}</code> , and click the <code class="verbatim">Publish message</code> button.</p>
<p>
You will see a log message like the following if you already ran <code class="verbatim">dc up --build</code>.  This means the <code class="verbatim">history</code> microservice is correctly receiving messages as they are added to <code class="verbatim">RabbitMQ</code>!</p>
<div class="src src-md">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>history          | time=2024-10-01T02:27:45.382Z level=INFO msg=collection.InsertOne insertedId=66fb5e21456bbf5fb79a4a94</span></span></code></pre></div>
</div>
<p>
Still with me?  Great!  Let&#39;s now take a look at the refactored <code class="verbatim">video-streaming</code> microservice that connects and publishes messages to the <code class="verbatim">viewedMessageQueue</code>.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">amqp</span> <span style="color:#e6db74">&#34;github.com/rabbitmq/amqp091-go&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`RABBIT`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to RabbitMQ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">rabbit</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`amqp.Dial`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Now we need to connect to the queue, consume messages.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ch</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Channel</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`conn.Channel`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Ensure the viewed queue exists.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">viewedMessageQueue</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`viewed`</span>, <span style="color:#75715e">// name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">true</span>,     <span style="color:#75715e">// durable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// delete when unused
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,      <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /video`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">`./videos/SampleVideo_1280x720_1mb.mp4`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/video.os.Open`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`/videoReader.Stat`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">`video/mp4`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// use io.Copy for streaming.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">videoPath</span>, <span style="color:#a6e22e">ch</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">viewedMessageQueue</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">`:`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">path</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">channel</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>, <span style="color:#a6e22e">queue</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Queue</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">body</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">viewedMessageBody</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">VideoPath</span>: <span style="color:#a6e22e">path</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Convert our payload into BSON; an optimized
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// version of JSON.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">payload</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">body</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`bson.Marshal`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Attempt to publish a message to the given queue.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">Publish</span>(<span style="color:#e6db74">``</span>, <span style="color:#a6e22e">queue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Publishing</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ContentType</span>: <span style="color:#e6db74">`application/bson`</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Body</span>:        <span style="color:#a6e22e">payload</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`channel.Publish`</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
The only change from <code class="verbatim">Round 2</code> is a slightly refactored <code class="verbatim">sendViewedMessage</code>, which now publishes a message to the <code class="verbatim">viewedMessageQueue</code> via the proper <code class="verbatim">channel</code> instead of directly contacting the <code class="verbatim">history</code> microservice.</p>
<p>
With <code class="verbatim">RabbitMQ</code> in place, we can now safely upgrade <code class="verbatim">history</code> without any risk of losing messages.</p>
<p>
Will this code work if multiple microservices want to listen for messages on the <code class="verbatim">viewed</code> queue?  Not exactly, which leads us to:</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
Round 4: Loose coupling of microservices with multiple recipients. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-05/tree/main/example-04">source</a>)
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>The bad thing about queues?  They can only be read from once.</p>
<p>
The good thing about <code class="verbatim">RabbitMQ</code>?  It adds the concept of an <code class="verbatim">Exchange</code>.</p>
<p>
An <code class="verbatim">Exchange</code> routes messages from its producers, <code class="verbatim">video-streaming</code> in this case, to every queue that binds to it with <code class="verbatim">QueueBind</code>.</p>
<p>
Let&#39;s see some code.  We&#39;ll start with <code class="verbatim">video-streaming</code> this time:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">amqp</span> <span style="color:#e6db74">&#34;github.com/rabbitmq/amqp091-go&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">`Content-Length`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">`Content-Type`</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`RABBIT`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to RabbitMQ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">rabbit</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`amqp.Dial`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a channel to communicate with RabbitMQ.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ch</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Channel</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`conn.Channel`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Declare an exchange of type &#34;fanout&#34;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This exchange will route messages to all queues bound to it,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// allowing for broadcast messaging to multiple consumers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">ExchangeDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`Viewed`</span>, <span style="color:#75715e">// Exchange name.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">`fanout`</span>, <span style="color:#75715e">// Exchange type.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">true</span>,     <span style="color:#75715e">// Durable?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// Delete when unused.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// internal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,      <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.ExchangeDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /video`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">`./videos/SampleVideo_1280x720_1mb.mp4`</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">`video/mp4`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// use io.Copy for streaming.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">videoPath</span>, <span style="color:#a6e22e">ch</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">`:`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sendViewedMessage</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">path</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">channel</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Channel</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Refactor to send to RabbitMQ.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">body</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">viewedMessageBody</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">VideoPath</span>: <span style="color:#a6e22e">path</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">payload</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">body</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">channel</span>.<span style="color:#a6e22e">Publish</span>(<span style="color:#e6db74">`Viewed`</span>, <span style="color:#e6db74">``</span>, <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Publishing</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ContentType</span>: <span style="color:#e6db74">`application/bson`</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Body</span>:        <span style="color:#a6e22e">payload</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`Unable to publish to RabbitMQ channel`</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
The <code class="verbatim">ch.ExchangeDeclare</code> function ensures the creation of the <code class="verbatim">Exchange</code> bound to the communication channel <code class="verbatim">ch</code>.  <code class="verbatim">sendViewedMessage</code> in the above code publishes a message to the <code class="verbatim">Viewed</code> exchange that is consumed by all queues bound to it.</p>
<p>
Let&#39;s now look at the updated <code class="verbatim">history</code> code:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">amqp</span> <span style="color:#e6db74">&#34;github.com/rabbitmq/amqp091-go&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/mongo/options&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbhost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBHOST`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">dbname</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`DBNAME`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`RABBIT`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to Mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">clientOpts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#a6e22e">dbhost</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">clientOpts</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`mongo.Connection`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">collection</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Database</span>(<span style="color:#a6e22e">dbname</span>).<span style="color:#a6e22e">Collection</span>(<span style="color:#e6db74">`history`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Disconnect</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to RabbitMQ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">rabbit</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`amqp.Dial`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a channel to communicate with RabbitMQ.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ch</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Channel</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`conn.Channel`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Declare an exchange of type &#34;fanout&#34; so we can bind to it.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">ExchangeDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`Viewed`</span>, <span style="color:#75715e">// Exchange name.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">`fanout`</span>, <span style="color:#75715e">// Exchange type.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">true</span>,     <span style="color:#75715e">// Durable?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// Delete when unused.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// internal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,    <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,      <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.ExchangeDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Declare a queue named &#34;historyQueue&#34;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This queue will be used to store messages routed from the &#34;Viewed&#34; exchange.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">historyQueue</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`historyQueue`</span>, <span style="color:#75715e">// name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,          <span style="color:#75715e">// durable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,          <span style="color:#75715e">// delete when unused
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,          <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,          <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,            <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Bind the historyQueue to the exchange.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueBind</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">historyQueue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// Queue name to bind,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">``</span>,                <span style="color:#75715e">// routing key; not applicable for fanout exchanges
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">`Viewed`</span>,          <span style="color:#75715e">// Exchange name.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,             <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,               <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueBind`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a channel to receive messages sent to our historyQueue.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">msgs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Consume</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">historyQueue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">``</span>,                <span style="color:#75715e">// consumer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,             <span style="color:#75715e">// auto-ack
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,             <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,             <span style="color:#75715e">// no-local
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,             <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,               <span style="color:#75715e">// args
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.Consume`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">msgs</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">msgBody</span> <span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Body</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">msgBody</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Add to Mongo
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">InsertOne</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">msgBody</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`collection.InsertOne`</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`collection.InsertOne`</span>, <span style="color:#e6db74">`insertedId`</span>, <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">InsertedID</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Ack</span>(<span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// The viewed handler is no longer necessary since we&#39;re ulling from the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// queue.  But we do need an endpoint that will print our view history.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">`GET /history`</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">skip</span>, <span style="color:#a6e22e">limit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`skip`</span>), <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`limit`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">skipInt</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">skip</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">limitInt</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Atoi</span>(<span style="color:#a6e22e">limit</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#e6db74">`Content-Type`</span>, <span style="color:#e6db74">`plain/text`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">findOptions</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Find</span>().
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetSkip</span>(int64(<span style="color:#a6e22e">skipInt</span>)).
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">SetLimit</span>(int64(<span style="color:#a6e22e">limitInt</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cursor</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">collection</span>.<span style="color:#a6e22e">Find</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">D</span>{}, <span style="color:#a6e22e">findOptions</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`/history.collection.Find`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">results</span> []<span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">cursor</span>.<span style="color:#a6e22e">All</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">TODO</span>(), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">results</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`/history.Cursor.All`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">result</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">results</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`cursor.All`</span>, <span style="color:#e6db74">`videoPath`</span>, <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">VideoPath</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`:%s`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">warnOnNonFatalError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
The important aspects of the code above are <code class="verbatim">(1)</code> we define the <code class="verbatim">Exchange</code>, <code class="verbatim">(2)</code> we define a <code class="verbatim">historyQueue</code>, and <code class="verbatim">(3)</code> we bind the <code class="verbatim">historyQueue</code> to the <code class="verbatim">Exchange</code> so we can receive messages sent to it.</p>
<p>
We repeat these steps for a new <code class="verbatim">recommendations</code> microservice to prove that an <code class="verbatim">Exchange</code> delivers messagea to all of its subscribers:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">amqp</span> <span style="color:#e6db74">&#34;github.com/rabbitmq/amqp091-go&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;go.mongodb.org/mongo-driver/bson&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">viewedMessageBody</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">VideoPath</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;videoPath&#34; bson:&#34;videoPath&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">NewTextHandler</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">logger</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">`run failed`</span>, <span style="color:#e6db74">`err`</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">`RABBIT`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Connect to RabbitMQ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">amqp</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">rabbit</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`amqp.Dial`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a channel to communicate with RabbitMQ.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ch</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Channel</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`conn.Channel`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Declare an exchange of type &#34;fanout&#34;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This exchange will route messages to all queues bound to it,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// allowing for broadcast messaging to multiple consumers.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">ExchangeDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`Viewed`</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`fanout`</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.ExchangeDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Declare a queue named &#34;recommendationsQueue&#34;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This queue will be used to store messages routed from the &#34;Viewed&#34; exchange.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">recommendationsQueue</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueDeclare</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">`recommendationsQueue`</span>, <span style="color:#75715e">// name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                  <span style="color:#75715e">// durable
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                  <span style="color:#75715e">// delete when unused
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                  <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                  <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,                    <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueDeclare`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Bind the recommendationsQueue to the exchange.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">QueueBind</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">recommendationsQueue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// Queue name to bind,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">``</span>,                        <span style="color:#75715e">// routing key; not applicable for fanout exchanges
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">`Viewed`</span>,                  <span style="color:#75715e">// Exchange name.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                     <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,                       <span style="color:#75715e">// arguments
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.QueueBind`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a channel to receive messages sent to our recommendationsQueue.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">msgs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ch</span>.<span style="color:#a6e22e">Consume</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">recommendationsQueue</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// queue
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#e6db74">``</span>,                        <span style="color:#75715e">// consumer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                     <span style="color:#75715e">// auto-ack
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                     <span style="color:#75715e">// exclusive
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                     <span style="color:#75715e">// no-local
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">false</span>,                     <span style="color:#75715e">// no-wait
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">nil</span>,                       <span style="color:#75715e">// args
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`ch.Consume`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">d</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">msgs</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">msgBody</span> <span style="color:#a6e22e">viewedMessageBody</span>
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">bson</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">Body</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">msgBody</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`&#39;viewed&#39; message ack.`</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Microservice online!`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// We&#39;re simply starting this server as a demo.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`:%s`</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failWithError</span>(<span style="color:#a6e22e">log</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Logger</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>, <span style="color:#a6e22e">msg</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">msg</span>, <span style="color:#e6db74">`error`</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
Launch the whole system with <code class="verbatim">dc up --build</code> and watch the log messages appear everytime you visit <code class="verbatim">http://localhost:4001/video</code>.</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Conclusion
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>We have now started the code for every microservice in the amazing <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> book.  Login and comments section aside, you now have the basic understanding of how to build sites like <a href="https://facebook.com/">Facebook</a>, <a href="https://flickr.com/">Flickr</a>, <a href="https://www.youtube.com/">YouTube</a>, and even <a href="https://x.com/">Twitter/X</a>.</p>
<p>
Next week we&#39;ll focus on deploying our microservices to any Kubernetes host.  We&#39;ll keep everything local (and free) by using <a href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download">minikube</a>.</p>
<p>
Then we&#39;ll learn to run <code class="verbatim">Continuous Integration</code> tests locally with <a href="https://github.com/nektos/act">act</a>.</p>
<p>
You&#39;ve learned a lot in this series so far, but there&#39;s always so much more to learn!</p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Rambling
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>To be honest, learning about the <code class="verbatim">air</code>-based (well, <code class="verbatim">nodemon</code> in the book) workflow is what made me want to start blogging.</p>
<p>
The joy of coding for me is trying, failing, learning, and trying again until I succeed in bringing my vision to life for me and the world. Developing microservices with Go and WITHOUT <code class="verbatim">air</code> always reminded me of this classic xkcd comic:</p>
<img src="https://imgs.xkcd.com/comics/compiling.png" alt="https://imgs.xkcd.com/comics/compiling.png" title="https://imgs.xkcd.com/comics/compiling.png" style="filter:invert(1); display:block; margin: 0 auto;"/>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Containers:Microservices :: Atoms:Universes</title>
      <link>https://example.org/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/</link>
      <pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/bootstrapping-microservices/containers-are-to-microservice-what-atoms-are-to-the-universe/</guid>
      <description>&lt;p&gt;&#xA;Containers are to Microservices what Atoms are to Universes.  What in the world does that mean, you ask?&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Universes are &lt;em&gt;composed&lt;/em&gt; of many Atoms.  Likewise, Microservices are &lt;em&gt;composed&lt;/em&gt; of many Containers.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;We containerized our &lt;code class=&#34;verbatim&#34;&gt;video-streaming&lt;/code&gt; endpoint last week.  This week we will decouple &lt;code class=&#34;verbatim&#34;&gt;video-streaming&lt;/code&gt; from its underlying storage mechanism by adding a &lt;code class=&#34;verbatim&#34;&gt;video-storage&lt;/code&gt; microservice, which will be backed by an &lt;code class=&#34;verbatim&#34;&gt;S3&lt;/code&gt;-compatible storage system.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;But first, let&amp;#39;s use our earlier &lt;code class=&#34;verbatim&#34;&gt;video-streaming&lt;/code&gt; Docker container from &lt;a href=&#34;https://example.org/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/&#34;&gt;last week&lt;/a&gt; to learn &lt;code class=&#34;verbatim&#34;&gt;docker compose&lt;/code&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[
<p>
Containers are to Microservices what Atoms are to Universes.  What in the world does that mean, you ask?</p>
<p>
Universes are <em>composed</em> of many Atoms.  Likewise, Microservices are <em>composed</em> of many Containers.</p>
<p>
We containerized our <code class="verbatim">video-streaming</code> endpoint last week.  This week we will decouple <code class="verbatim">video-streaming</code> from its underlying storage mechanism by adding a <code class="verbatim">video-storage</code> microservice, which will be backed by an <code class="verbatim">S3</code>-compatible storage system.</p>
<p>
But first, let&#39;s use our earlier <code class="verbatim">video-streaming</code> Docker container from <a href="/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/">last week</a> to learn <code class="verbatim">docker compose</code>.</p>
<div id="outline-container-headline-1" class="outline-3">
<h3 id="headline-1">
Round 1: <code class="verbatim">docker compose</code>. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-04/tree/main/example-1">source</a>)
</h3>
<div id="outline-text-headline-1" class="outline-text-3">
<p>Last week we learned to create a <code class="verbatim">Dockerfile</code> that allows us to create and easily deploy our <code class="verbatim">video-streaming</code> microservice anywhere.</p>
<p>
We used the Docker CLI with several flags to specify the required environment variable (<code class="verbatim">-e</code>) and mapped port 4000 on our local computer to port 80 (<code class="verbatim">-p 4000:80</code>) in our container.  Remembering the relevant flags and the required container creation order, especially when connecting containers and their associated dependencies is difficult if not impossible.</p>
<p>
Thankfully, <code class="verbatim">docker compose</code> comes to our rescue.  <code class="verbatim">docker-compose.yaml</code> (or <code class="verbatim">docker-compose.yml</code>) allows us to express dependencies between containers so we can define the configuration once and forget it.  The declarative nature of the <code class="verbatim">docker-compose.yml</code> file simplifies both deployment and testing.  (Testing will be covered in a few weeks.)</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Version isn&#39;t required as of Docker 3.9, but old habits die hard.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Our service name is video-streaming.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">video-streaming</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># It creates an image named video-streaming...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># ...from the Dockerfile in the ./video-streaming subdirectory.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">context</span>: <span style="color:#ae81ff">./video-streaming</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfile</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The container&#39;s image name is also video-streaming,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># although it doesn&#39;t have to be.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">video-streaming</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Here we map our host port 4000 to the container port 80.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4000:80&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Here we specify the environment variables our microservice</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># depends on.  We only need PORT for now.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">PORT=80</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Do we want to restart the container if it fails?</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Not during development.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span></span></span></code></pre></div>
</div>
<p>
With our <code class="verbatim">docker-compose.yaml</code> file defined, and our microservice from last week moved to the <code class="verbatim">./video-streaming</code> subdirectory, we can now start our first microservice.  (A single Atom Universe!)</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker compose up</span></span></code></pre></div>
</div>
<p>
We verify our microservice is running with the following:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker compose ps</span></span></code></pre></div>
</div>
<p>
And we can shut it down with:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker compose down</span></span></code></pre></div>
</div>
<p>
Personally, I like having the <code class="verbatim">dc</code> alias (for Linux and Macs) as follows:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>alias dc<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;docker compose&#39;</span></span></span></code></pre></div>
</div>
<p>
This makes it easy to quickly <code class="verbatim">dc up</code>, <code class="verbatim">dc ps</code>, and <code class="verbatim">dc down</code> as needed.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Round 2: <code class="verbatim">S3</code>, <code class="verbatim">MinIO</code>, and the <code class="verbatim">video-storage</code> microservice. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-04/tree/main/example-2">source</a>)
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Atoms need to interact with other Atoms to make the Universe fun, so let&#39;s add our second Atom: <code class="verbatim">video-storage</code>.</p>
<p>
Our first container from last week has one major flaw: the sample video was mounted directly from the local file system into the <code class="verbatim">video-streaming</code> Docker image.  This restriction would force our files to be copied to every machine running the container, which wouldn&#39;t be very efficient.</p>
<p>
Another option, the one we&#39;ll use, is to host our files in the magical cloud and make them accessible via HTTP.  Amazon&#39;s <code class="verbatim">S3</code> service fits this description, allowing us to place files into <code class="verbatim">Buckets</code> and retrieve them via HTTP, so we&#39;ll use it.</p>
<p>
But, we think, do we <em>really</em> want to pay for <code class="verbatim">S3</code> while we&#39;re still in the learning phase?  Not really.  Life happens and we may get distracted, leaving us paying a bill for something that&#39;s not providing us value.</p>
<p>
This is where <code class="verbatim">MinIO</code> enters the picture.  <code class="verbatim">MinIO</code> is an <code class="verbatim">S3</code>-compatible file system that runs in a local Docker container; <code class="verbatim">MinIO</code> lets you learn at your own pace for zero cost.</p>
<div id="outline-container-headline-3" class="outline-4">
<h4 id="headline-3">
MinIO Basics
</h4>
<div id="outline-text-headline-3" class="outline-text-4">
<p>Docker offers the simplest and most straight-forward way to launch <code class="verbatim">MinIO</code>, so let&#39;s append it to our earlier <code class="verbatim">docker-compose.yaml</code> file.</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#75715e"># MinIO is our service name.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">minio</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># We use the bitnami image for easier configuration.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker.io/bitnami/minio:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">minio</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># MinIO can be used with secret keys or a username</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># and password.  The former will be covered in future</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># weeks, so let&#39;s stick with username/password for now.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">MINIO_ROOT_USER=steven</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">MINIO_ROOT_PASSWORD=changeme</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># MINIO_DEFAULT_BUCKETS creates non-existant buckets for us.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">MINIO_DEFAULT_BUCKETS=videos</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Don&#39;t restart on error so we know something went wrong.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#e6db74">&#34;no&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Port 9000 is MinIO&#39;s default service port.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;9000:9000&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Port 9001 is for MinIO&#39;s web interface.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># We login with the MINIO_ROOT_USER and</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># MINIO_ROOT_PASSWORD defined above.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;9001:9001&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># MinIO stores data in /bitmap/minio/data, at least</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># in this image.  We&#39;ll overlay our ./data directory</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># there so every Bucket change persists locally.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./data:/bitnami/minio/data</span></span></span></code></pre></div>
</div>
<p>
Starting the services with <code class="verbatim">dc up --build</code> (after <code class="verbatim">dc down --volumes</code> if you launched the first one) enables <code class="verbatim">MinIO</code>&#39;s web interface at <code class="verbatim">http://localhost:9001/</code>.</p>
<p>
This round requires the sample video file to be placed in the <code class="verbatim">videos</code> <code class="verbatim">Bucket</code> we created earlier, so:</p>
<ol>
<li>Start the microservice with <code class="verbatim">dc up --build</code>.</li>
<li>Login to the <a href="http://localhost:9001/">web interface</a> with the values you chose for <code class="verbatim">MINIO_ROOT_USER</code> and <code class="verbatim">MINIO_ROOT_PASSWORD</code>.</li>
<li>Click <code class="verbatim">Object Browser</code> on the left under User.</li>
<li>Click the <code class="verbatim">videos</code> folder.</li>
<li>Click <code class="verbatim">Upload</code>, then <code class="verbatim">Upload File</code>.</li>
<li>Select the sample video to upload it.</li>
</ol>
<p>Congrats on making it this far!  Next: the <code class="verbatim">video-storage</code> microservice!</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-4">
<h4 id="headline-4">
<code class="verbatim">video-storage</code>
</h4>
<div id="outline-text-headline-4" class="outline-text-4">
<p>Our <code class="verbatim">video-storage</code> microservice relies on <strong><strong>six</strong></strong> environment variables to function, so we&#39;re going to make a helper func that will either retrieve those variables or kill the program with an error telling us which variable needs to be set.</p>
<p>
Then we&#39;ll connect to <code class="verbatim">S3=/=MinIO</code> and create an HTTP endpoint that can stream the file to the recipient (browser or another microservice) upon request.</p>
<p>
See below:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/aws/aws-sdk-go-v2/aws&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/aws/aws-sdk-go-v2/credentials&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;github.com/aws/aws-sdk-go-v2/service/s3&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// If the requested environment variable is missing, fail with
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// the given error message.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#a6e22e">variableName</span>, <span style="color:#a6e22e">failureMessage</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#a6e22e">variableName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">failureMessage</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">value</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Retrieve the required environment variables.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`PORT`</span>, <span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">minioStorageHost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`MINIO_STORAGE_HOST`</span>, <span style="color:#e6db74">`Please specify the name for the storage host in the variable MINIO_STORAGE_HOST.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">minioStoragePort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`MINIO_STORAGE_PORT`</span>, <span style="color:#e6db74">`Please specify the port number for the storage host with the environment variable MINIO_STORAGE_PORT.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">bucketName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">&#34;BUCKET&#34;</span>, <span style="color:#e6db74">`Please specify the S3 bucket name in the environment variable BUCKET.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">minioUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`MINIO_ROOT_USER`</span>, <span style="color:#e6db74">`Please specify the S3 user name in the environment variable MINIO_ROOT_USER.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">minioPassword</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`MINIO_ROOT_PASSWORD`</span>, <span style="color:#e6db74">`Please specify the S3 password in the environment variable MINIO_ROOT_PASSWORD.`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Define our S3/MinIO endpoint.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">minioEndpoint</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`%s:%s`</span>, <span style="color:#a6e22e">minioStorageHost</span>, <span style="color:#a6e22e">minioStoragePort</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Default for now.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">awsRegion</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;us-east-1&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// A CredentialsProvider is required to login to S3/MinIO.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">credProvider</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">aws</span>.<span style="color:#a6e22e">NewCredentialsCache</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">credentials</span>.<span style="color:#a6e22e">NewStaticCredentialsProvider</span>(
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">minioUser</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">minioPassword</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">&#34;&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// BaseEndpoint and UsePathStyle are the most important variables here.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// BaseEndpoint is your localhost:port.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// UsePathStyle lets you access files like they&#39;re in
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// a filesystem.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// s3.New returns a client that can retrieve and store
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// files in S3.  For now, we only care about retrieval.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">s3svc</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s3</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">s3</span>.<span style="color:#a6e22e">Options</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Credentials</span>:  <span style="color:#a6e22e">credProvider</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Region</span>:       <span style="color:#a6e22e">awsRegion</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">BaseEndpoint</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">minioEndpoint</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">UsePathStyle</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Extract the path value.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">path</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`path`</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">input</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">s3</span>.<span style="color:#a6e22e">GetObjectInput</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Bucket</span>: <span style="color:#a6e22e">aws</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">bucketName</span>),
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Key</span>:    <span style="color:#a6e22e">aws</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">path</span>),
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Retrieve the object from S3...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">result</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s3svc</span>.<span style="color:#a6e22e">GetObject</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">input</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// ...or not.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">Body</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`video-storage online`</span>, <span style="color:#e6db74">`port`</span>, <span style="color:#a6e22e">port</span>, <span style="color:#e6db74">`bucketName`</span>, <span style="color:#a6e22e">bucketName</span>, <span style="color:#e6db74">`host`</span>, <span style="color:#a6e22e">minioEndpoint</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
With the <code class="verbatim">video-storage</code> microservice defined, let&#39;s now add it to our <code class="verbatim">docker-compose.yml</code> file.</p>
<div class="src src-dockerfile">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span>  video-storage:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    build:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      context: ./video-storage<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      dockerfile: Dockerfile<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - BUCKET<span style="color:#f92672">=</span>videos<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - MINIO_ROOT_USER<span style="color:#f92672">=</span>steven<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - MINIO_ROOT_PASSWORD<span style="color:#f92672">=</span>changeme<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - MINIO_STORAGE_HOST<span style="color:#f92672">=</span>http://minio<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - MINIO_STORAGE_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9000</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;4001:80&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    restart: <span style="color:#e6db74">&#34;no&#34;</span></span></span></code></pre></div>
</div>
<p>
Now we&#39;re ALMOST complete.</p>
<p>
The <code class="verbatim">video-streaming</code> microservice from Round 1 still stores the sample <code class="verbatim">.mp4</code> in its own image.  Let&#39;s now remove that responsibility from <code class="verbatim">video-streaming</code> and delegate it to where it belongs: <code class="verbatim">video-storage</code>!</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#a6e22e">variableName</span>, <span style="color:#a6e22e">failureMessage</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#a6e22e">variableName</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">failureMessage</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">value</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">port</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`PORT`</span>, <span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// The host is minio.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">videoStorageHost</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`VIDEO_STORAGE_HOST`</span>, <span style="color:#e6db74">`Please specify the video storage host name with the environment variable VIDEO_STORAGE_HOST.`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// The REST port is 9000.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">videoStoragePort</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">failOnMissingEnvironmentVariable</span>(<span style="color:#e6db74">`VIDEO_STORAGE_PORT`</span>, <span style="color:#e6db74">`Please specify the video storage port number with the environment variable VIDEO_STORAGE_PORT.`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;/video?path=SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStorageURL</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`%s:%s%s`</span>, <span style="color:#a6e22e">videoStorageHost</span>, <span style="color:#a6e22e">videoStoragePort</span>, <span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span>, <span style="color:#a6e22e">videoStorageURL</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Header</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Retrieve videoStorageURL.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">DefaultClient</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// This error check alone won&#39;t check for 404s, unfortunately.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusFailedDependency</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;couldn&#39;t retrieve %s from %s&#34;</span>, <span style="color:#a6e22e">videoPath</span>, <span style="color:#a6e22e">videoStorageHost</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`video-storage online`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
One <code class="verbatim">dc down --volumes</code> and <code class="verbatim">dc up --build</code> later and you&#39;re <em>finally</em> ready to see your results.  (Atoms two and three, <code class="verbatim">MinIO</code> and <code class="verbatim">video-storage</code>, make our Universe much cleaner.)</p>
<p>
We can even test our <code class="verbatim">video-storage</code> microservice individually by, based on the port mappings in our <code class="verbatim">docker-compose.yml</code> file, visiting <a href="http://localhost:4001/video?path=SampleVideo_1280x720_1mb.mp4">localhost:4001</a>.</p>
<p>
Next?  Even more excitement!  We&#39;re about to add a fourth Atom to our Universe: a database to map those filenames to YouTube-like query strings.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Round 3: <code class="verbatim">MongoDB</code> for the win! (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-04/tree/main/example-3">source</a>)
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>Which of the following URL paths do you prefer?</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1. /video?path=SampleVideo_1280x720_1mb.mp4
</span></span><span style="display:flex;"><span>2. /video?id=5d9e690ad76fe06a3d7ae416</span></span></code></pre></div>
</div>
<p>
You are in good company if you chose number 2!  So that&#39;s what we&#39;ll do.</p>
<p>
We will need a database collection mapping the <code class="verbatim">id</code> parameter we&#39;ll retrieve in <code class="verbatim">video-streaming</code> to the <code class="verbatim">path</code> parameter expected in the <code class="verbatim">video-storage</code> microservice, so let&#39;s add <code class="verbatim">MongoDB</code> to our <code class="verbatim">docker-compose.yml</code>:</p>
<div class="src src-yaml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">db</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">mongo:7</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">db</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;4000:27017&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">always</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">depends_on</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">minio</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">./db-fixtures:/fixtures</span></span></span></code></pre></div>
</div>
<p>
Next we need to update <code class="verbatim">video-streaming</code> to retrieve the filename from <code class="verbatim">MongoDB</code> before we can ask <code class="verbatim">video-storage</code> to send us some of those sweet, sweet bytes its storing.</p>
<p>
Fortunately, the changes required to <code class="verbatim">video-streaming</code> here are largely cosmetic.  We simply retrieve the <code class="verbatim">videoPath</code> from the <code class="verbatim">MongoDB</code> database instead of hard-coding it, then we request it from the <code class="verbatim">video-storage</code> microservice along and forward the request headers.</p>
<p>
Compare the <code class="verbatim">http.HandlerFunc</code> from Round 2â¦</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>    <span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;/video?path=SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStorageURL</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`%s:%s%s`</span>, <span style="color:#a6e22e">videoStorageHost</span>, <span style="color:#a6e22e">videoStoragePort</span>, <span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span>, <span style="color:#a6e22e">videoStorageURL</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Header</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">DefaultClient</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusFailedDependency</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;couldn&#39;t retrieve %s from %s&#34;</span>, <span style="color:#a6e22e">videoPath</span>, <span style="color:#a6e22e">videoStorageHost</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>)
</span></span><span style="display:flex;"><span>	})</span></span></code></pre></div>
</div>
<p>
â¦with the one from this Round:</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getPathFromObjectID</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">`id`</span>), <span style="color:#a6e22e">collection</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`video-storage`</span>, <span style="color:#e6db74">`id`</span>, <span style="color:#e6db74">`not found`</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStorageURL</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%s:%s/video?id=%s&#34;</span>, <span style="color:#a6e22e">videoStorageHost</span>, <span style="color:#a6e22e">videoStoragePort</span>, <span style="color:#f92672">*</span><span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewRequest</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">MethodGet</span>, <span style="color:#a6e22e">videoStorageURL</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Header</span> = <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Header</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Retrieve videoStorageURL.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">resp</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">DefaultClient</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// This error check alone won&#39;t check for 404s, so we need to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// ensure we fail on any non-OK response.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">StatusCode</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusOK</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`video-storage`</span>, <span style="color:#e6db74">`retrieval error`</span>, <span style="color:#a6e22e">err</span>, <span style="color:#e6db74">`url`</span>, <span style="color:#a6e22e">videoStorageURL</span>, <span style="color:#e6db74">`addr`</span>, <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">RemoteAddr</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusFailedDependency</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">Body</span>)
</span></span><span style="display:flex;"><span>	})</span></span></code></pre></div>
</div>
<p>
The two handler functions are identical except for the <code class="verbatim">nil</code>-check and the call to the <code class="verbatim">getPathFromObjectID</code> helper function, which executes the <code class="verbatim">MongoDB</code> query when the <code class="verbatim">id</code> field isn&#39;t empty.</p>
<p>
There&#39;s seven additional lines of <code class="verbatim">MongoDB</code> client initialization code as well, but the two are functionally indistinguishable.</p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Errata
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>This week&#39;s code was complicated by my old-fashioned development approach and solved by <a href="https://www.linkedin.com/in/ashleydavis75/">Ashley Davis&#39;s</a> wisdom from the <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> book: run the service outside of <code class="verbatim">docker-compose</code> when developing and use live-reload.</p>
<p>
I wasted a lot of time Sunday and Monday tweaking the code, adding logging here and there, then waiting for <code class="verbatim">dc down --volumes &amp;&amp; dc up --build</code> to run, then loading the sample data into <code class="verbatim">MongoDB</code> with <code class="verbatim">mongoimport --database videos --collection videos --file ./fixtures/videos.json</code>, and finally testing the endpoints for both <code class="verbatim">video-streaming</code> and <code class="verbatim">video-storage</code> to no avail.</p>
<p>
I woke up yesterday morning with the following thoughts:</p>
<ol>
<li><code class="verbatim">video-storage</code> only depends on the <code class="verbatim">mongo</code> microservice.</li>
<li><code class="verbatim">mongo</code> exposes its port <code class="verbatim">9000</code> locally, so I can connect to it locally.</li>
<li><code class="verbatim">emacs</code> has a <code class="verbatim">Postman</code> equivalent called <a href="https://github.com/pashky/restclient.el">restclient</a> that allows developers to test endpoints directly from inside emacs.</li>
<li>Load a <code class="verbatim">tmux</code> session with 3 panes: the first running <code class="verbatim">air</code> in the <code class="verbatim">video-storage</code> microservice (with tons of logging), the second holding the actual Go code to edit in emacs, and the third running restclient in another emacs window.</li>
</ol>
<p>With the help of <code class="verbatim">air</code>, I was able to quickly iterate on the code, let the service reload independently, and run the HTTP tests in emacs.</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">5000</span> MINIO_ROOT_USER<span style="color:#f92672">=</span>steven MINIO_ROOT_PASSWORD<span style="color:#f92672">=</span>changeme MINIO_STORAGE_HOST<span style="color:#f92672">=</span>http://localhost MINIO_STORAGE_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9000</span> BUCKET<span style="color:#f92672">=</span>videos air</span></span></code></pre></div>
</div>
<p>
After an hour of iterating and testing, I realized the <code class="verbatim">slog</code> messages lacked the actual error message.  Adding those fields showed my code wasn&#39;t wrong, my configuration was.</p>
<p>
<code class="verbatim">MINIO_STORAGE_HOST</code> was set to <code class="verbatim">mongodb://minio</code> instead of <code class="verbatim">http://minio</code>.</p>
<p>
Boy did I feel stupid. :)</p>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
Addendum
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p><code class="verbatim">docker-compose</code> and <code class="verbatim">Kubernetes</code> always remind me of the <a href="https://www.youtube.com/watch?v=OiYjTb3opAA">Captain Planet</a> theme song.  <em>By your containers combined!</em></p>
<p>
<em>By your containers composed!</em> maybe?</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Docker and Containers and Minikube! Oh My!</title>
      <link>https://example.org/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/bootstrapping-microservices/docker-and-containers-and-minikube-oh-my/</guid>
      <description>&lt;p&gt;&#xA;We ended last week with a web server that can &lt;a href=&#34;https://example.org/bootstrapping-microservices/in-the-beginning/&#34;&gt;stream our sample video&lt;/a&gt; to the web browser.  This week we focus on &lt;strong&gt;&lt;strong&gt;Chapter 3: Publishing Your First Microservice&lt;/strong&gt;&lt;/strong&gt; from &lt;a href=&#34;https://bootstrapping-microservices.com/&#34;&gt;Bootstrapping Microservices&lt;/a&gt;, but with one major tweak in &lt;a href=&#34;#outline-container-headline-3&#34;&gt;Section 3&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Before we get there, we need to know a tiny bit about &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Section 1: A Brief Introduction to Docker&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;Developers frequently dealt with inconsistent development and production environments, with team members often having difficulty replicating production errors on their own machines.  This was a huge drain on productivity.&lt;/p&gt;</description>
      <content:encoded><![CDATA[
<p>
We ended last week with a web server that can <a href="/bootstrapping-microservices/in-the-beginning/">stream our sample video</a> to the web browser.  This week we focus on <strong><strong>Chapter 3: Publishing Your First Microservice</strong></strong> from <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a>, but with one major tweak in <a href="#outline-container-headline-3">Section 3</a>.</p>
<p>
Before we get there, we need to know a tiny bit about <a href="https://www.docker.com/">Docker</a>.</p>
<div id="outline-container-headline-1" class="outline-3">
<h3 id="headline-1">
Section 1: A Brief Introduction to Docker
</h3>
<div id="outline-text-headline-1" class="outline-text-3">
<p>Developers frequently dealt with inconsistent development and production environments, with team members often having difficulty replicating production errors on their own machines.  This was a huge drain on productivity.</p>
<p>
Docker finally enabled a write-once, deploy anywhere workflow that enables consistent deployment of <code class="verbatim">images</code> to any machine imaginable.  <code class="verbatim">Containers</code> can be created consistently from these images and run under almost any imaginable environment.</p>
<p>
Docker images are created with <code class="verbatim">Dockerfiles</code>, a set of instructions for creating an <code class="verbatim">image</code>.</p>
<p>
Here&#39;s a simple example:</p>
<div class="src src-dockerfile">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.23</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> . /src<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /src</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">RUN</span> go build -o main .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/main&#34;</span>]</span></span></code></pre></div>
</div>
<p>
Everything prior to the <code class="verbatim">ENTRYPOINT</code> line is stored in a separate layer of the image.</p>
<p>
Now let&#39;s move on to the next step: Docker.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Section 2: Enough theory! Let&#39;s practice Docker! (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-03/blob/main/example-01/Dockerfile">source</a>)
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Our <code class="verbatim">Dockerfile</code> will be slightly more complicated than those in the book, but only so we can minimize the size of our final Docker image.</p>
<div class="src src-dockerfile">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#75715e"># builder is our temporary image.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.23 AS builder</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ADD allows us to place every file in the</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># current directory to the /src directory of</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># the golang image.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ADD</span> . /src<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># WORKDIR is the directory where our RUN and CMD</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># instructions execute in.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /src</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Disabling CGO_ENABLED creates a larger executable,</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># but strengthens our security by eliminating all</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># other Linux executables.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># RUN executes the given command in WORKDIR.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Here, we build the video-streaming binary.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go build -o main .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># SCRATCH is an empty image: size 0 bytes.  It&#39;s extremely</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># useful for improving your security.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> scratch</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># WORKDIR says make the root directory our working directory.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># COPY allows us to copy files from either our host</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># computer or, with the --from option, an earlier build stage,</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># to our final image.  We&#39;ll first copy the executable main,</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># from the builder stage, then we&#39;ll copy the /src/videos directory.</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /src/main /<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /src/videos /videos<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># ENTRYPOINT specifies the command that runs when this</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># container starts,</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/main&#34;</span>]</span></span></code></pre></div>
</div>
<p>
With our <code class="verbatim">Dockerfile</code> defined, let&#39;s now switch to the <code class="verbatim">chapter-03</code> directory and build our first image:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker build -t video-streaming .</span></span></code></pre></div>
</div>
<p>
And finally, we can instantiate a container from our image with:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker run -p 3000:3000 -e PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">3000</span> video-streaming</span></span></code></pre></div>
</div>
<p>
We can even run a second instance of the container bound to another local port if we so choose:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ docker run -p 3001:3000 -e PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">3000</span> video-streaming</span></span></code></pre></div>
</div>
<p>
We don&#39;t need to at this point, but this can be helpful when comparing the functionality of separate versions of the same microservice.  (aka, regression tests.  More on that in future weeks.)</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Section 3: Publishing our microservice
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>This is where we deviate slightly from the book.  This series will use <a href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Flinux%2Fx86-64%2Fstable%2Fbinary+download">minikube</a> as its Kubernetes platform instead of Azure, eliminating any risk of getting <em>&#34;accidentally&#34;</em> charged while learning Kubernetes.</p>
<p>
We won&#39;t be interacting with Kubernetes for three more weeks, but we&#39;ll demonstrate loading our images into the <code class="verbatim">minikube</code> container registry here since the book does.</p>
<p>
For Linux and Macs:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ minikube start
</span></span><span style="display:flex;"><span>$ eval <span style="color:#66d9ef">$(</span>minikube docker-env<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>$ docker build -t video-streaming .
</span></span><span style="display:flex;"><span>$ minikube stop</span></span></code></pre></div>
</div>
<p>
For Powershell:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>PS&gt; minikube start
</span></span><span style="display:flex;"><span>PS&gt; minikube -p minikube docker-env --shell powershell | Invoke-Expression
</span></span><span style="display:flex;"><span>PS&gt; docker build -t video-streaming .
</span></span><span style="display:flex;"><span>PS&gt; minikube stop</span></span></code></pre></div>
</div>
<p>
â¦and finally, for the Windows command prompt:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>C:<span style="color:#ae81ff">\t</span>mp&gt; minikube start
</span></span><span style="display:flex;"><span>C:<span style="color:#ae81ff">\t</span>mp&gt; @FOR /f <span style="color:#e6db74">&#34;tokens=*&#34;</span> %i IN <span style="color:#f92672">(</span><span style="color:#e6db74">&#39;minikube -p minikube docker-env --shell cmd&#39;</span><span style="color:#f92672">)</span> DO @%i
</span></span><span style="display:flex;"><span>C:<span style="color:#ae81ff">\t</span>mp&gt; docker build -t video-streaming .
</span></span><span style="display:flex;"><span>C:<span style="color:#ae81ff">\t</span>mp&gt; minikube stop</span></span></code></pre></div>
</div>
<p>
Using <code class="verbatim">minikube</code> as our container registry is sufficient for now, as we&#39;ll primarily be using <code class="verbatim">docker compose</code> during development.</p>
<p>
Next week: <code class="verbatim">docker compose</code>, <code class="verbatim">MongoDB</code>, <code class="verbatim">S3</code>, <code class="verbatim">MinIO</code>, and the <code class="verbatim">video-storage</code> microservice.  Get excited!</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>In the Beginning</title>
      <link>https://example.org/bootstrapping-microservices/in-the-beginning/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/bootstrapping-microservices/in-the-beginning/</guid>
      <description>&lt;p&gt;&#xA;This is the first entry in a weekly series that will teach you everything you need to know to build microservices in Go.  The series will directly port all of the NodeJS code from the amazing &lt;a href=&#34;https://bootstrapping-microservices.com/&#34;&gt;Bootstrapping Microservices&lt;/a&gt; book by Ashley Davis.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Let&amp;#39;s begin with the first example from &lt;strong&gt;&lt;strong&gt;Chapter 2: Creating Your First Microservice&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Example 1: Say Hello World! (&lt;a href=&#34;https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-01&#34;&gt;source&lt;/a&gt;)&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bootstrapping-microservices-2nd-edition/chapter-2/blob/main/example-1/src/index.js&#34;&gt;Node&lt;/a&gt; code:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Imports &lt;code class=&#34;verbatim&#34;&gt;Express&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Creates an &lt;code class=&#34;verbatim&#34;&gt;Express&lt;/code&gt; instance.&lt;/li&gt;&#xA;&lt;li&gt;Defines the &lt;code class=&#34;verbatim&#34;&gt;port&lt;/code&gt; to listen on.&lt;/li&gt;&#xA;&lt;li&gt;Adds a &lt;code class=&#34;verbatim&#34;&gt;GET&lt;/code&gt; handler for the &lt;code class=&#34;verbatim&#34;&gt;/&lt;/code&gt; path.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code class=&#34;verbatim&#34;&gt;/&lt;/code&gt; handler writes &lt;code class=&#34;verbatim&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/code&gt; to the browser.&lt;/li&gt;&#xA;&lt;li&gt;Makes the server listen.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The Go code almost exactly mimics the Node code.&lt;/p&gt;</description>
      <content:encoded><![CDATA[
<p>
This is the first entry in a weekly series that will teach you everything you need to know to build microservices in Go.  The series will directly port all of the NodeJS code from the amazing <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> book by Ashley Davis.</p>
<p>
Let&#39;s begin with the first example from <strong><strong>Chapter 2: Creating Your First Microservice</strong></strong>.</p>
<div id="outline-container-headline-1" class="outline-3">
<h3 id="headline-1">
Example 1: Say Hello World! (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-01">source</a>)
</h3>
<div id="outline-text-headline-1" class="outline-text-3">
<p>The <a href="https://github.com/bootstrapping-microservices-2nd-edition/chapter-2/blob/main/example-1/src/index.js">Node</a> code:</p>
<ol>
<li>Imports <code class="verbatim">Express</code>.</li>
<li>Creates an <code class="verbatim">Express</code> instance.</li>
<li>Defines the <code class="verbatim">port</code> to listen on.</li>
<li>Adds a <code class="verbatim">GET</code> handler for the <code class="verbatim">/</code> path.</li>
<li>The <code class="verbatim">/</code> handler writes <code class="verbatim">&#34;Hello World!&#34;</code> to the browser.</li>
<li>Makes the server listen.</li>
</ol>
<p>The Go code almost exactly mimics the Node code.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #1: net/http contains http.ServeMux, the express equivalent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// #3: Let&#39;s make the port a constant
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">port</span> = <span style="color:#ae81ff">3000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #2: http.NewServeMux() mimics express()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #4: http.ServeMux lacks method-specific handlers,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// so we specify the method before the path.  Not
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// specifying a method makes this HandlerFunc respond
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// to every request, including PUT, POST, and DELETE.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #5: fmt.Fprint writes to anything that implements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// io.Writer, which http.ResponseWriter does, so
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// &#34;Hello World!&#34; gets sent to the browser.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;Hello World!&#34;</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #6: http.ListenAndServe is the equivalent of
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// app.Listen.  http.ListenAndServe can take either
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// nil, which uses the default ServeMux, or a custom
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// ServeMux, which is mux in our case.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
If you understand the sample above, you&#39;re well on your way to building microservices in Go.  Congrats!</p>
<p>
You will need to initialize the Go modules in the directory before running the code.  You can do so with:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ go mod init video-streaming</span></span></code></pre></div>
</div>
<p>
If you&#39;re curious, Go modules are explained <a href="https://go.dev/blog/using-go-modules">here</a>.</p>
<p>
Now let&#39;s move on to something only slightly more exciting: streaming a video.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Example 2: Stream a video. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-02">source</a>)
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Streaming a video is not that different from sending a text response.</p>
<p>
The server is created the same way.  The <code class="verbatim">HandlerFunc</code> is added to the <code class="verbatim">ServeMux</code> the same way.  The server is even started the same way.</p>
<p>
The only thing that changes is our endpoint: we now listen for <code class="verbatim">GET</code> requests to the <code class="verbatim">/video</code> endpoint instead of <code class="verbatim">/</code>.</p>
<p>
Let&#39;s see the code.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #1: Use constants to avoid typos.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This converts most typo-induced runtime errors
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// into compile Sun Sep  8 21:52:50 2024errors.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">port</span> = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;../videos/SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #2: Let&#39;s open videoPath.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// #3: Fail early on error.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #4: defer runs the given function right before
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// the function ends, so be sure we close the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// if we can successfully open it.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #5: videoReader.Stat() is the same as fs.promises.stat.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// we use it to get the size, failing if we can&#39;t read the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// file statistics.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #6: videoStats.Size() returns a 64bit integer.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// w.Header().Add(header, value) expects a string, so
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// strconv.FormatInt converts an integer into a string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// with the given base: 10, in this case.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #7: Set the Content-Type to video/mp4 so the browser can
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// interpret it correctly.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #8: Finally, use io.Copy to stream to the browser.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// This is the same as piping the video data to res.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #9: Starts the http.ServeMux.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Example 3: Live reloads. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-03">source</a>)
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>Go lacks a builtin live-reload feature, so we&#39;ll have to find a <code class="verbatim">nodemon</code> equivalent.  Fortunately for us, <a href="https://github.com/air-verse/air">air</a> is the solution.</p>
<p>
Install <code class="verbatim">air</code> with <code class="verbatim">go install github.com/air-verse/air@latest</code>, then start the server by changing to the example-03 directory and running <code class="verbatim">air</code>.</p>
<p>
With the server still running, we decide that we want the server to run on any port we specify in the <code class="verbatim">PORT</code> environment variable, so we remove the <code class="verbatim">const port = 3000</code> line and extract it from the environment instead.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #1: Look the PORT environment variable.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// Extract its value and learn if it was found.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #2: If PORT wasn&#39;t provided, we fail and the server never starts.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;../videos/SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
That change wasn&#39;t too hard.  The updated code now allows us to launch the server on any port we want, as seen below.</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">4000</span> air</span></span></code></pre></div>
</div>
<p>
We can even launch many servers, each listening on its own port!  That feature will come in handy in a few weeks when we have multiple microservices running simultaneously.</p>
<p>
Congratulations if you&#39;ve made it this far!  New updates will be posted every Monday for the next few months.  We will be covering <strong><strong>everything</strong></strong> in <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> and then some!</p>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
