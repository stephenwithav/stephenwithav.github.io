<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Microservices on Steven&#39;s Thoughts</title>
    <link>http://localhost:1313/tags/microservices/</link>
    <description>Recent content in Microservices on Steven&#39;s Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Steven Edwards</copyright>
    <lastBuildDate>Sun, 08 Sep 2024 10:00:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In the Beginning</title>
      <link>http://localhost:1313/bootstrapping-microservices/in-the-beginning/</link>
      <pubDate>Sun, 08 Sep 2024 10:00:00 -0400</pubDate>
      <guid>http://localhost:1313/bootstrapping-microservices/in-the-beginning/</guid>
      <description>&lt;p&gt;&#xA;This is the first entry in a weekly series that will teach you everything you need to know to build microservices in Go.  The series will directly port all of the NodeJS code from the amazing &lt;a href=&#34;https://bootstrapping-microservices.com/&#34;&gt;Bootstrapping Microservices&lt;/a&gt; book by Ashley Davis.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Let&amp;#39;s begin with the first example from &lt;strong&gt;&lt;strong&gt;Chapter 2: Creating Your First Microservice&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Example 1: Say Hello World! (&lt;a href=&#34;https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-01&#34;&gt;source&lt;/a&gt;)&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bootstrapping-microservices-2nd-edition/chapter-2/blob/main/example-1/src/index.js&#34;&gt;Node&lt;/a&gt; code:&lt;/p&gt;</description>
      <content:encoded><![CDATA[
<p>
This is the first entry in a weekly series that will teach you everything you need to know to build microservices in Go.  The series will directly port all of the NodeJS code from the amazing <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> book by Ashley Davis.</p>
<p>
Let&#39;s begin with the first example from <strong><strong>Chapter 2: Creating Your First Microservice</strong></strong>.</p>
<div id="outline-container-headline-1" class="outline-3">
<h3 id="headline-1">
Example 1: Say Hello World! (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-01">source</a>)
</h3>
<div id="outline-text-headline-1" class="outline-text-3">
<p>The <a href="https://github.com/bootstrapping-microservices-2nd-edition/chapter-2/blob/main/example-1/src/index.js">Node</a> code:</p>
<ol>
<li>Imports <code class="verbatim">Express</code>.</li>
<li>Creates an <code class="verbatim">Express</code> instance.</li>
<li>Defines the <code class="verbatim">port</code> to listen on.</li>
<li>Adds a <code class="verbatim">GET</code> handler for the <code class="verbatim">/</code> path.</li>
<li>The <code class="verbatim">/</code> handler writes <code class="verbatim">&#34;Hello World!&#34;</code> to the browser.</li>
<li>Makes the server listen.</li>
</ol>
<p>The Go code almost exactly mimics the Node code.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #1: net/http contains http.ServeMux, the express equivalent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// #3: Let&#39;s make the port a constant
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">port</span> = <span style="color:#ae81ff">3000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #2: http.NewServeMux() mimics express()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// #4: http.ServeMux lacks method-specific handlers,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// so we specify the method before the path.  Not
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// specifying a method makes this HandlerFunc respond
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// to every request, including PUT, POST, and DELETE.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #5: fmt.Fprint writes to anything that implements
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// io.Writer, which http.ResponseWriter does, so
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// &#34;Hello World!&#34; gets sent to the browser.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;Hello World!&#34;</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #6: http.ListenAndServe is the equivalent of
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// app.Listen.  http.ListenAndServe can take either
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// nil, which uses the default ServeMux, or a custom
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// ServeMux, which is mux in our case.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
If you understand the sample above, you&#39;re well on your way to building microservices in Go.  Congrats!</p>
<p>
You will need to initialize the Go modules in the directory before running the code.  You can do so with:</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ go mod init video-streaming</span></span></code></pre></div>
</div>
<p>
If you&#39;re curious, Go modules are explained <a href="https://go.dev/blog/using-go-modules">here</a>.</p>
<p>
Now let&#39;s move on to something only slightly more exciting: streaming a video.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Example 2: Stream a video. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-02">source</a>)
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Streaming a video is not that different from sending a text response.</p>
<p>
The server is created the same way.  The <code class="verbatim">HandlerFunc</code> is added to the <code class="verbatim">ServeMux</code> the same way.  The server is even started the same way.</p>
<p>
The only thing that changes is our endpoint: we now listen for <code class="verbatim">GET</code> requests to the <code class="verbatim">/video</code> endpoint instead of <code class="verbatim">/</code>.</p>
<p>
Let&#39;s see the code.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #1: Use constants to avoid typos.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// This converts most typo-induced runtime errors
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// into compile Sun Sep  8 21:52:50 2024errors.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">port</span> = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;../videos/SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #2: Let&#39;s open videoPath.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// #3: Fail early on error.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #4: defer runs the given function right before
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// the function ends, so be sure we close the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// if we can successfully open it.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #5: videoReader.Stat() is the same as fs.promises.stat.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// we use it to get the size, failing if we can&#39;t read the
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// file statistics.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #6: videoStats.Size() returns a 64bit integer.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// w.Header().Add(header, value) expects a string, so
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// strconv.FormatInt converts an integer into a string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// with the given base: 10, in this case.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #7: Set the Content-Type to video/mp4 so the browser can
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// interpret it correctly.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// #8: Finally, use io.Copy to stream to the browser.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// This is the same as piping the video data to res.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #9: Starts the http.ServeMux.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Example 3: Live reloads. (<a href="https://github.com/Bootstrapping-Microservices-in-Go/chapter-02/tree/main/example-03">source</a>)
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>Go lacks a builtin live-reload feature, so we&#39;ll have to find a <code class="verbatim">nodemon</code> equivalent.  Fortunately for us, <a href="https://github.com/air-verse/air">air</a> is the solution.</p>
<p>
Install <code class="verbatim">air</code> with <code class="verbatim">go install github.com/air-verse/air@latest</code>, then start the server by changing to the example-03 directory and running <code class="verbatim">air</code>.</p>
<p>
With the server still running, we decide that we want the server to run on any port we specify in the <code class="verbatim">PORT</code> environment variable, so we remove the <code class="verbatim">const port = 3000</code> line and extract it from the environment instead.</p>
<div class="src src-go">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;strconv&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentLength</span> = <span style="color:#e6db74">&#34;Content-Length&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contentType</span>   = <span style="color:#e6db74">&#34;Content-Type&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #1: Look the PORT environment variable.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// Extract its value and learn if it was found.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">port</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">LookupEnv</span>(<span style="color:#e6db74">`PORT`</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// #2: If PORT wasn&#39;t provided, we fail and the server never starts.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">`Please specify the port number for the HTTP server with the environment variable PORT.`</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;GET /video&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoPath</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;../videos/SampleVideo_1280x720_1mb.mp4&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoReader</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">videoPath</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">videoStats</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">videoReader</span>.<span style="color:#a6e22e">Stat</span>()
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentLength</span>, <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">FormatInt</span>(<span style="color:#a6e22e">videoStats</span>.<span style="color:#a6e22e">Size</span>(), <span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">contentType</span>, <span style="color:#e6db74">&#34;video/mp4&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">videoReader</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprint</span>(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">port</span>), <span style="color:#a6e22e">mux</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
<p>
That change wasn&#39;t too hard.  The updated code now allows us to launch the server on any port we want, as seen below.</p>
<div class="src src-sh">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">4000</span> air</span></span></code></pre></div>
</div>
<p>
We can even launch many servers, each listening on its own port!  That feature will come in handy in a few weeks when we have multiple microservices running simultaneously.</p>
<p>
Congratulations if you&#39;ve made it this far!  New updates will be posted every Monday for the next few months.  We will be covering <strong><strong>everything</strong></strong> in <a href="https://bootstrapping-microservices.com/">Bootstrapping Microservices</a> and then some!</p>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
